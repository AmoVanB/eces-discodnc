/* 
 * This file is part of the Disco Deterministic Network Calculator >= v2.4 "Chimera".
 *
 * The Disco Deterministic Network Calculator (DiscoDNC) is free software;
 * you can redistribute it and/or modify it under the terms of the 
 * GNU Lesser General Public License as published by the Free Software Foundation; 
 * either version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 * 
 */ 

package de.uni_kl.cs.discodnc.output;

import java.util.LinkedList;

import de.uni_kl.cs.discodnc.curves.CurvePwAffine;

import de.uni_kl.cs.discodnc.nc.AnalysisConfig.Multiplexing;

import de.uni_kl.cs.discodnc.network.Network;
import de.uni_kl.cs.discodnc.network.NetworkFactory;
import de.uni_kl.cs.discodnc.network.Server;

public class OutputTestNetworkSaved implements NetworkFactory {	private Network network;

	public void createServers1( Network network, Server[] servers ) throws Exception {
		servers[5] = network.addServer( "s18", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[26] = network.addServer( "s36", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[35] = network.addServer( "s22", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[36] = network.addServer( "s20", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[30] = network.addServer( "s24", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[21] = network.addServer( "s4", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[11] = network.addServer( "s32", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[19] = network.addServer( "s13", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[23] = network.addServer( "s27", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[3] = network.addServer( "s31", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[16] = network.addServer( "s25", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[15] = network.addServer( "s10", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[37] = network.addServer( "s1", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[33] = network.addServer( "s6", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[1] = network.addServer( "s11", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[7] = network.addServer( "s2", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[9] = network.addServer( "s16", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[25] = network.addServer( "s3", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[31] = network.addServer( "s33", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[22] = network.addServer( "s8", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[12] = network.addServer( "s15", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[8] = network.addServer( "s37", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[10] = network.addServer( "s19", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[20] = network.addServer( "s7", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[14] = network.addServer( "s23", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[6] = network.addServer( "s28", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[32] = network.addServer( "s14", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[34] = network.addServer( "s5", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[18] = network.addServer( "s0", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[29] = network.addServer( "s26", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[13] = network.addServer( "s9", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[28] = network.addServer( "s35", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[4] = network.addServer( "s30", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[17] = network.addServer( "s17", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[2] = network.addServer( "s29", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[24] = network.addServer( "s21", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[0] = network.addServer( "s34", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
		servers[27] = network.addServer( "s12", CurvePwAffine.getFactory().createServiceCurve( "SC{(0.0,0.0),10000.0}" ), CurvePwAffine.getFactory().createMaxServiceCurve( "MSC{(0.0,0.0),0.0;!(0.0,Infinity),0.0}" ), Multiplexing.ARBITRARY, true, true );
	}

	public void createLinks1( Network network, Server[] servers ) throws Exception {
		network.addLink( "l11", servers[19], servers[14] );
		network.addLink( "l44", servers[3], servers[35] );
		network.addLink( "l48", servers[22], servers[28] );
		network.addLink( "l15", servers[7], servers[30] );
		network.addLink( "l17", servers[9], servers[10] );
		network.addLink( "l38", servers[29], servers[11] );
		network.addLink( "l52", servers[6], servers[32] );
		network.addLink( "l40", servers[2], servers[26] );
		network.addLink( "l22", servers[8], servers[26] );
		network.addLink( "l12", servers[19], servers[30] );
		network.addLink( "l34", servers[5], servers[30] );
		network.addLink( "l7", servers[24], servers[22] );
		network.addLink( "l51", servers[26], servers[13] );
		network.addLink( "l5", servers[20], servers[36] );
		network.addLink( "l6", servers[24], servers[33] );
		network.addLink( "l10", servers[19], servers[35] );
		network.addLink( "l28", servers[21], servers[20] );
		network.addLink( "l37", servers[29], servers[3] );
		network.addLink( "l31", servers[18], servers[36] );
		network.addLink( "l2", servers[17], servers[13] );
		network.addLink( "l9", servers[16], servers[27] );
		network.addLink( "l18", servers[9], servers[24] );
		network.addLink( "l21", servers[8], servers[0] );
		network.addLink( "l24", servers[25], servers[31] );
		network.addLink( "l3", servers[34], servers[19] );
		network.addLink( "l14", servers[7], servers[35] );
		network.addLink( "l23", servers[25], servers[3] );
		network.addLink( "l41", servers[0], servers[4] );
		network.addLink( "l20", servers[37], servers[12] );
		network.addLink( "l53", servers[12], servers[23] );
		network.addLink( "l25", servers[11], servers[21] );
		network.addLink( "l4", servers[20], servers[10] );
		network.addLink( "l42", servers[30], servers[11] );
		network.addLink( "l0", servers[17], servers[20] );
		network.addLink( "l45", servers[3], servers[14] );
		network.addLink( "l32", servers[18], servers[24] );
		network.addLink( "l1", servers[17], servers[22] );
		network.addLink( "l33", servers[5], servers[14] );
		network.addLink( "l19", servers[32], servers[18] );
		network.addLink( "l30", servers[10], servers[37] );
		network.addLink( "l26", servers[13], servers[25] );
		network.addLink( "l39", servers[2], servers[28] );
		network.addLink( "l43", servers[30], servers[31] );
		network.addLink( "l46", servers[3], servers[16] );
		network.addLink( "l47", servers[22], servers[0] );
		network.addLink( "l13", servers[1], servers[6] );
		network.addLink( "l16", servers[7], servers[16] );
		network.addLink( "l49", servers[26], servers[33] );
		network.addLink( "l29", servers[21], servers[22] );
		network.addLink( "l35", servers[5], servers[16] );
		network.addLink( "l8", servers[24], servers[13] );
		network.addLink( "l27", servers[21], servers[33] );
		network.addLink( "l36", servers[15], servers[2] );
		network.addLink( "l50", servers[26], servers[20] );
	}

	public void createFlows1( Network network, Server[] servers ) throws Exception {
		LinkedList<Server> servers_on_path_s = new LinkedList<Server>();

		servers_on_path_s.add( servers[16] );
		servers_on_path_s.add( servers[27] );
		network.addFlow( "f112", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[34] );
		servers_on_path_s.add( servers[19] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f42", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[29] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		servers_on_path_s.add( servers[12] );
		servers_on_path_s.add( servers[23] );
		network.addFlow( "f1", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[6] );
		servers_on_path_s.add( servers[32] );
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		servers_on_path_s.add( servers[4] );
		network.addFlow( "f78", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[5] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		network.addFlow( "f37", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[5] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		network.addFlow( "f122", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[15] );
		servers_on_path_s.add( servers[2] );
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f82", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[17] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		network.addFlow( "f80", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		network.addFlow( "f87", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[16] );
		servers_on_path_s.add( servers[27] );
		network.addFlow( "f2", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[29] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		servers_on_path_s.add( servers[12] );
		network.addFlow( "f12", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[2] );
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[20] );
		network.addFlow( "f86", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f128", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f19", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		network.addFlow( "f53", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[5] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		network.addFlow( "f67", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f52", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f85", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[8] );
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		network.addFlow( "f84", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[2] );
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		network.addFlow( "f91", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[30] );
		network.addFlow( "f13", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[31] );
		network.addFlow( "f83", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[2] );
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		network.addFlow( "f9", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[31] );
		network.addFlow( "f132", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		network.addFlow( "f14", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[29] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		servers_on_path_s.add( servers[12] );
		servers_on_path_s.add( servers[23] );
		network.addFlow( "f17", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f73", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[1] );
		servers_on_path_s.add( servers[6] );
		servers_on_path_s.add( servers[32] );
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f149", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[15] );
		servers_on_path_s.add( servers[2] );
		servers_on_path_s.add( servers[26] );
		network.addFlow( "f65", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		network.addFlow( "f0", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[20] );
		network.addFlow( "f66", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		servers_on_path_s.add( servers[12] );
		network.addFlow( "f141", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[31] );
		network.addFlow( "f142", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[37] );
		servers_on_path_s.add( servers[12] );
		servers_on_path_s.add( servers[23] );
		network.addFlow( "f59", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[9] );
		servers_on_path_s.add( servers[10] );
		network.addFlow( "f143", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[9] );
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[22] );
		network.addFlow( "f8", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[2] );
		servers_on_path_s.add( servers[26] );
		network.addFlow( "f98", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[2] );
		network.addFlow( "f68", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f81", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f119", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f71", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[20] );
		network.addFlow( "f41", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[34] );
		servers_on_path_s.add( servers[19] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		network.addFlow( "f57", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[5] );
		servers_on_path_s.add( servers[16] );
		servers_on_path_s.add( servers[27] );
		network.addFlow( "f62", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[34] );
		servers_on_path_s.add( servers[19] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f46", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f35", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[18] );
		network.addFlow( "f31", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[16] );
		servers_on_path_s.add( servers[27] );
		network.addFlow( "f7", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[34] );
		servers_on_path_s.add( servers[19] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		servers_on_path_s.add( servers[12] );
		servers_on_path_s.add( servers[23] );
		network.addFlow( "f11", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[1] );
		servers_on_path_s.add( servers[6] );
		servers_on_path_s.add( servers[32] );
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		network.addFlow( "f25", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[8] );
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f95", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[17] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		network.addFlow( "f135", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f94", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[32] );
		servers_on_path_s.add( servers[18] );
		network.addFlow( "f55", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[5] );
		servers_on_path_s.add( servers[30] );
		network.addFlow( "f63", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f93", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[8] );
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		network.addFlow( "f45", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[17] );
		servers_on_path_s.add( servers[20] );
		network.addFlow( "f76", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[1] );
		servers_on_path_s.add( servers[6] );
		servers_on_path_s.add( servers[32] );
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		network.addFlow( "f116", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[34] );
		network.addFlow( "f36", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[19] );
		servers_on_path_s.add( servers[30] );
		network.addFlow( "f150", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		network.addFlow( "f26", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[15] );
		servers_on_path_s.add( servers[2] );
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		network.addFlow( "f131", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[2] );
		servers_on_path_s.add( servers[26] );
		network.addFlow( "f56", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[2] );
		network.addFlow( "f54", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[2] );
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[31] );
		network.addFlow( "f107", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[34] );
		servers_on_path_s.add( servers[19] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		network.addFlow( "f69", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[1] );
		servers_on_path_s.add( servers[6] );
		servers_on_path_s.add( servers[32] );
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f33", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[8] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f70", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[6] );
		servers_on_path_s.add( servers[32] );
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		network.addFlow( "f60", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		network.addFlow( "f106", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		network.addFlow( "f145", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
	}

	public void createFlows2( Network network, Server[] servers ) throws Exception {
		LinkedList<Server> servers_on_path_s = new LinkedList<Server>();
		servers_on_path_s.add( servers[0] );
		servers_on_path_s.add( servers[4] );
		network.addFlow( "f39", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[16] );
		servers_on_path_s.add( servers[27] );
		network.addFlow( "f49", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f100", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[22] );
		network.addFlow( "f144", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[15] );
		servers_on_path_s.add( servers[2] );
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f110", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[1] );
		servers_on_path_s.add( servers[6] );
		servers_on_path_s.add( servers[32] );
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		network.addFlow( "f10", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		servers_on_path_s.add( servers[12] );
		network.addFlow( "f74", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		servers_on_path_s.add( servers[4] );
		network.addFlow( "f48", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f124", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[9] );
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f77", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[5] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		network.addFlow( "f32", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[16] );
		servers_on_path_s.add( servers[27] );
		network.addFlow( "f5", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[32] );
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f109", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		servers_on_path_s.add( servers[12] );
		network.addFlow( "f115", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[9] );
		network.addFlow( "f105", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		servers_on_path_s.add( servers[4] );
		network.addFlow( "f21", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[15] );
		servers_on_path_s.add( servers[2] );
		servers_on_path_s.add( servers[26] );
		network.addFlow( "f3", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[1] );
		servers_on_path_s.add( servers[6] );
		servers_on_path_s.add( servers[32] );
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[16] );
		servers_on_path_s.add( servers[27] );
		network.addFlow( "f97", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f148", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[8] );
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		network.addFlow( "f136", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[19] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f147", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[19] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		network.addFlow( "f117", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		servers_on_path_s.add( servers[12] );
		servers_on_path_s.add( servers[23] );
		network.addFlow( "f43", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		servers_on_path_s.add( servers[12] );
		servers_on_path_s.add( servers[23] );
		network.addFlow( "f38", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[17] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[16] );
		servers_on_path_s.add( servers[27] );
		network.addFlow( "f6", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[1] );
		servers_on_path_s.add( servers[6] );
		servers_on_path_s.add( servers[32] );
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		network.addFlow( "f104", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[8] );
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		network.addFlow( "f103", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[34] );
		servers_on_path_s.add( servers[19] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		network.addFlow( "f89", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f24", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[10] );
		network.addFlow( "f96", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[8] );
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		network.addFlow( "f90", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[17] );
		servers_on_path_s.add( servers[20] );
		network.addFlow( "f108", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[7] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		network.addFlow( "f133", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[34] );
		servers_on_path_s.add( servers[19] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f79", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		network.addFlow( "f127", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[19] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		servers_on_path_s.add( servers[12] );
		network.addFlow( "f134", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[5] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f15", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[7] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		servers_on_path_s.add( servers[12] );
		servers_on_path_s.add( servers[23] );
		network.addFlow( "f92", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[30] );
		network.addFlow( "f58", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[29] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		network.addFlow( "f137", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f51", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		network.addFlow( "f22", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f40", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[19] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		servers_on_path_s.add( servers[12] );
		servers_on_path_s.add( servers[23] );
		network.addFlow( "f4", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[5] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		network.addFlow( "f75", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[8] );
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f118", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[32] );
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[16] );
		servers_on_path_s.add( servers[27] );
		network.addFlow( "f29", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[9] );
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f129", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[34] );
		servers_on_path_s.add( servers[19] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		network.addFlow( "f102", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[12] );
		servers_on_path_s.add( servers[23] );
		network.addFlow( "f126", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[1] );
		servers_on_path_s.add( servers[6] );
		servers_on_path_s.add( servers[32] );
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f113", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[17] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f101", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[7] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		network.addFlow( "f18", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[17] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[31] );
		network.addFlow( "f140", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[5] );
		servers_on_path_s.add( servers[30] );
		network.addFlow( "f125", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[8] );
		servers_on_path_s.add( servers[0] );
		servers_on_path_s.add( servers[4] );
		network.addFlow( "f111", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[29] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[16] );
		servers_on_path_s.add( servers[27] );
		network.addFlow( "f130", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[2] );
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[35] );
		network.addFlow( "f146", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		servers_on_path_s.add( servers[4] );
		network.addFlow( "f88", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		servers_on_path_s.add( servers[12] );
		servers_on_path_s.add( servers[23] );
		network.addFlow( "f23", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		network.addFlow( "f44", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f120", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[34] );
		servers_on_path_s.add( servers[19] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		network.addFlow( "f61", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[8] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f16", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[1] );
		servers_on_path_s.add( servers[6] );
		servers_on_path_s.add( servers[32] );
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[31] );
		network.addFlow( "f34", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
	}

	public void createFlows3( Network network, Server[] servers ) throws Exception {
		LinkedList<Server> servers_on_path_s = new LinkedList<Server>();
		servers_on_path_s.add( servers[21] );
		network.addFlow( "f99", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f27", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[5] );
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[22] );
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f72", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[30] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		servers_on_path_s.add( servers[12] );
		network.addFlow( "f28", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[1] );
		servers_on_path_s.add( servers[6] );
		servers_on_path_s.add( servers[32] );
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[22] );
		network.addFlow( "f20", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[34] );
		network.addFlow( "f139", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		network.addFlow( "f50", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[29] );
		servers_on_path_s.add( servers[11] );
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		network.addFlow( "f138", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[0] );
		network.addFlow( "f47", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[2] );
		network.addFlow( "f121", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[2] );
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[16] );
		servers_on_path_s.add( servers[27] );
		network.addFlow( "f123", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[32] );
		servers_on_path_s.add( servers[18] );
		servers_on_path_s.add( servers[24] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[16] );
		servers_on_path_s.add( servers[27] );
		network.addFlow( "f114", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[21] );
		servers_on_path_s.add( servers[20] );
		network.addFlow( "f151", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[15] );
		servers_on_path_s.add( servers[2] );
		servers_on_path_s.add( servers[26] );
		servers_on_path_s.add( servers[20] );
		servers_on_path_s.add( servers[10] );
		servers_on_path_s.add( servers[37] );
		servers_on_path_s.add( servers[12] );
		network.addFlow( "f64", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
		servers_on_path_s.add( servers[17] );
		servers_on_path_s.add( servers[13] );
		servers_on_path_s.add( servers[25] );
		servers_on_path_s.add( servers[3] );
		servers_on_path_s.add( servers[16] );
		servers_on_path_s.add( servers[27] );
		network.addFlow( "f30", CurvePwAffine.getFactory().createArrivalCurve( "AC{(0.0,0.0),0.0;!(0.0,5.0),5.0}" ), servers_on_path_s );
		servers_on_path_s.clear();
	}

	public OutputTestNetworkSaved() {
		network = createNetwork();	}

	public Network createNetwork() {
		Server[] servers = new Server[38];
		network = new Network();
		try{
			createServers1( network, servers );
			createLinks1( network, servers );
			createFlows1( network, servers );
			createFlows2( network, servers );
			createFlows3( network, servers );
		} catch (Exception e) {
			e.printStackTrace();
		}
		return network;
	}

	public Network getNetwork() {
		return network;	}
	public void reinitializeCurves() {
		network = createNetwork();	}}
